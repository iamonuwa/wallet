import { expectSaga } from 'redux-saga-test-plan'
import { call } from 'redux-saga/effects'
import { swapSubmitSaga } from 'src/swap/saga'
import { swapApprove, swapExecute } from 'src/swap/slice'
import { fetchWithTimeout } from 'src/utils/fetchWithTimeout'
import Logger from 'src/utils/Logger'
import { getContractKit } from 'src/web3/contracts'
import networkConfig from 'src/web3/networkConfig'
import { getConnectedUnlockedAccount } from 'src/web3/saga'
import { mockAccount } from 'test/values'

const loggerErrorSpy = jest.spyOn(Logger, 'error')
const contractKit = {
  getWallet: jest.fn(),
  getAccounts: jest.fn(),
  connection: {
    chainId: jest.fn(() => '42220'),
    nonce: jest.fn(),
    gasPrice: jest.fn(),
  },
}
jest.mock('src/transactions/send', () => ({
  sendTransaction: jest.fn(() => ({ transactionHash: '0x123' })),
}))

const mockSwap = {
  payload: {
    approveTransaction: {
      chainId: contractKit.connection.chainId(),
      data:
        '0x095ea7b3000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000000000000000000000000000016345785d8a0000',
      gas: '59480',
      to: '0xD8763CBa276a3738E6DE85b4b3bF5FDed6D6cA73',
    },
    userInput: {
      buyAmount: '0.1',
    },
    unvalidatedSwapTransaction: {
      allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
      buyAmount: '17791568446398073',
      buyTokenAddress: '0xd8763cba276a3738e6de85b4b3bf5fded6d6ca73',
      buyTokenToEthRate: '0.804015607990445111',
      chainId: 42220,
      data:
        '0x415565b0000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000d8763cba276a3738e6de85b4b3bf5fded6d6ca73000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000003e93861c12790c00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000e919f65739c26a42616b7b8eedc6b5524d1e3ac4000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000255626553776170000000000000000000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000007d28570135a2b1930f331c507f65039d4937f66c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000918146359264c492bd6934071c6bd31c854edbc3000000000000000000000000e919f65739c26a42616b7b8eedc6b5524d1e3ac40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e919f65739c26a42616b7b8eedc6b5524d1e3ac4000000000000000000000000d8763cba276a3738e6de85b4b3bf5fded6d6ca73000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002a0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000253757368695377617000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000003e93861c12790c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000001421bde4b10e8dd459b3bcb598810b1337d5684200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e919f65739c26a42616b7b8eedc6b5524d1e3ac4000000000000000000000000d8763cba276a3738e6de85b4b3bf5fded6d6cac00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000e919f65739c26a42616b7b8eedc6b5524d1e3ac4000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000d645e14fbe1327c17d54a02470041d714cf47c930000000000000000000000000000000000000000000000af78c9cf4b632cad5a',
      decodedUniqueId: 'af78c9cf4b-1663872346',
      estimatedGas: '316000',
      estimatedPriceImpact: '100',
      expectedSlippage: null,
      from: '0x078e54ad49b0865fff9086fd084b92b3dac0857d',
      gas: '316000',
      gasPrice: '500000000',
      guaranteedPrice: '0.17613652761934092',
      minimumProtocolFee: '0',
      orders: [
        {
          fill: [Object],
          fillData: [Object],
          makerAmount: '0',
          makerToken: '0xe919f65739c26a42616b7b8eedc6b5524d1e3ac4',
          source: 'UbeSwap',
          sourcePathId: '',
          takerAmount: '100000000000000000',
          takerToken: '0xe8537a3d056da446677b9e9d6c5db704eaab4787',
          type: 0,
        },
        {
          fill: [Object],
          fillData: [Object],
          makerAmount: '17791568446398073',
          makerToken: '0xd8763cba276a3738e6de85b4b3bf5fded6d6ca73',
          source: 'SushiSwap',
          sourcePathId: '',
          takerAmount:
            '115792089237316195423570985008687907853269984665640564039457584007913129639935',
          takerToken: '0xe919f65739c26a42616b7b8eedc6b5524d1e3ac4',
          type: 0,
        },
      ],
      price: '0.17791568446398073',
      protocolFee: '0',
      sellAmount: '100000000000000000',
      sellTokenAddress: '0xe8537a3d056da446677b9e9d6c5db704eaab4787',
      sellTokenToEthRate: '0.000000000162733064',
      sources: [
        {
          name: 'UbeSwap',
          proportion: '0',
        },
        {
          name: 'SushiSwap',
          proportion: '0',
        },
        {
          hops: [Array],
          intermediateToken: '0xe919f65739c26a42616b7b8eedc6b5524d1e3ac4',
          name: 'MultiHop',
          proportion: '1',
        },
        {
          name: 'MobiusMoney',
          proportion: '0',
        },
      ],
      to: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
      value: '0',
    },
  },
}

describe(swapSubmitSaga, () => {
  const mockResponseAPI = {
    allowanceTarget: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
    buyAmount: '19197903079383983',
    buyTokenAddress: '0x765de816845861e75a25fca122bb6898b8b1282a',
    buyTokenToEthRate: '0.788040078882612337',
    chainId: 42220,
    data:
      '0x415565b0000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000765de816845861e75a25fca122bb6898b8b1282a000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000004400028ce60c2700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000765de816845861e75a25fca122bb6898b8b1282a000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000255626553776170000000000000000000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000004400028ce60c27000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000007d28570135a2b1930f331c507f65039d4937f66c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000765de816845861e75a25fca122bb6898b8b1282a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e8537a3d056da446677b9e9d6c5db704eaab4787000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000a7989f839d632ca2e5',
    decodedUniqueId: 'a7989f839d-1663869669',
    estimatedGas: '460533',
    estimatedPriceImpact: '100',
    expectedSlippage: null,
    from: '0x078e54ad49b0865fff9086fd084b92b3dac0857d',
    gas: '460533',
    gasPrice: '500000000',
    guaranteedPrice: '0.19140309370145831',
    minimumProtocolFee: '0',
    orders: [[Object]],
    price: '0.19197903079383983',
    protocolFee: '0',
    sellAmount: '100000000000000000',
    sellTokenAddress: '0xe8537a3d056da446677b9e9d6c5db704eaab4787',
    sellTokenToEthRate: '0.000000000162733064',
    sources: [[Object], [Object], [Object], [Object]],
    to: '0xdef1c0ded9bec7f1a1670819833240f027b25eff',
    value: '0',
  }

  const mockResponse = {
    ok: true,
    json: () => {
      return { validatedSwapTransaction: mockResponseAPI }
    },
  }

  const executeSwapUri = `${networkConfig.executeSwapUrl}?buyToken=0x765de816845861e75a25fca122bb6898b8b1282a&sellToken=0xe8537a3d056da446677b9e9d6c5db704eaab4787&sellAmount=100000000000000000&userAddress=${mockAccount}`

  it('should complete swap', async () => {
    await expectSaga(swapSubmitSaga, mockSwap)
      .provide([
        [call(getContractKit), contractKit],
        [call(getConnectedUnlockedAccount), mockAccount],
        [call(fetchWithTimeout, executeSwapUri), mockResponse],
      ])
      .put(swapApprove())
      .put(swapExecute())
      .run()
    expect(loggerErrorSpy).not.toHaveBeenCalled()
  })

  it.todo('should set swap state correctly on price change')

  it.todo('should set swap state correctly on error')
})
